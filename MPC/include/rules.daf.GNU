# -*- Makefile -*-

# This is a multiple-include guard for this file because older versions of
# ACE's gnuace template will do an automatic include of this file as well
# as the one that will be generated by the verbatim in dcps.mpb.
ifndef rules_daf_gnu_included
rules_daf_gnu_included=1


# Turn on symbol versioning. The scheme that we follow is to allow
# applications dependent on libraries, with same version numbers (major,
# minor and beta) to run, but applications with dependencies on libraries
# with different minor or major or beta versions to fail.
#
ifeq (cmd,$(findstring cmd,$(SHELL)))
DAF_MAJOR_VERSION := $(shell awk "/DAF_MAJOR_VERSION/ { print $$3}" ${DAF_ROOT}/daf/Version.h)
DAF_MINOR_VERSION := $(shell awk "/DAF_MINOR_VERSION/ { print $$3}" ${DAF_ROOT}/daf/Version.h)
DAF_BETA_VERSION  := $(shell awk "/DAF_BETA_VERSION/ { print $$3}" ${DAF_ROOT}/daf/Version.h)
else
DAF_MAJOR_VERSION := $(shell awk '/DAF_MAJOR_VERSION/ { print $$3}' ${DAF_ROOT}/daf/Version.h)
DAF_MINOR_VERSION := $(shell awk '/DAF_MINOR_VERSION/ { print $$3}' ${DAF_ROOT}/daf/Version.h)
DAF_BETA_VERSION  := $(shell awk '/DAF_BETA_VERSION/ { print $$3}' ${DAF_ROOT}/daf/Version.h)
endif


#
# TAF 
#
ifneq (, $(findstring TAF, $(ACE_SHLIBS)))
    ifeq (cmd,$(findstring cmd,$(SHELL)))
    TAF_MAJOR_VERSION := $(shell awk "/TAF_MAJOR_VERSION/ { print $$3}" ${DAF_ROOT}/TAF/taf/Version.h)
    TAF_MINOR_VERSION := $(shell awk "/TAF_MINOR_VERSION/ { print $$3}" ${DAF_ROOT}/TAF/taf/Version.h)
    TAF_BETA_VERSION  := $(shell awk "/TAF_BETA_VERSION/ { print $$3}" ${DAF_ROOT}/TAF/taf/Version.h)
    else
    TAF_MAJOR_VERSION := $(shell awk '/TAF_MAJOR_VERSION/ { print $$3}' ${DAF_ROOT}/TAF/taf/Version.h)
    TAF_MINOR_VERSION := $(shell awk '/TAF_MINOR_VERSION/ { print $$3}' ${DAF_ROOT}/TAF/taf/Version.h)
    TAF_BETA_VERSION  := $(shell awk '/TAF_BETA_VERSION/ { print $$3}' ${DAF_ROOT}/TAF/taf/Version.h)
    endif
endif # TAF linkage
#
# We should be able to fix whatever we want to the so filename 
# by checking for 
# 1. features 
# 2. check for linkage ? How to do this. can we walk through the requires/macros flags ? 
# we should be able to use the ACE_SHLIBS variable and look for ndds OR NDDS_PubSub etc. 
# 3. We could look for the XX_PubSub libraries or the raw nddscpp, DCPS libraries. 
#    As we want to manage the TAF stuff only and not touch other builds. We shall look 
#    ONLY for the XX_PubSub linkages.
# OUR default behaviour will be to set GNUACE_PROJECT_VERSION. 
# EXCEPT when rules.dds.GNU has been added (aka OpenDDS)
# 

#
# Search NDDS_PubSub ? in ACE_SHLIBS (RTI Connext - NDDS)
#
ifneq (, $(findstring NDDS_PubSub, $(ACE_SHLIBS)))
  $(info TAF NDDS Connector detected)  
  # Find the NDDS Version 
  ifeq (cmd,$(findstring cmd,$(SHELL)))
    NDDS_MAJOR_VERSION := $(shell awk "/RTI_DDS_VERSION_MAJOR/ { print $$3}" ${NDDSHOME}/include/ndds/ndds_version.h)
    NDDS_MINOR_VERSION := $(shell awk "/RTI_DDS_VERSION_MINOR/ { print $$3}" ${NDDSHOME}/include/ndds/ndds_version.h)
    NDDS_BETA_VERSION := $(shell awk "/RTI_DDS_VERSION_RELEASE/ { print $$3}" ${NDDSHOME}/include/ndds/ndds_version.h)    
  else
    NDDS_MAJOR_VERSION := $(shell awk '/RTI_DDS_VERSION_MAJOR/ { print $$3}' ${NDDSHOME}/include/ndds/ndds_version.h)
    NDDS_MINOR_VERSION := $(shell awk '/RTI_DDS_VERSION_MINOR/ { print $$3}' ${NDDSHOME}/include/ndds/ndds_version.h)
    NDDS_BETA_VERSION := $(shell awk '/RTI_DDS_VERSION_RELEASE/ { print $$3}' ${NDDSHOME}/include/ndds/ndds_version.h)    
  endif
  
 # GNUACE_PROJECT_VERSION ?= $(TAF_MAJOR_VERSION).$(TAF_MINOR_VERSION).$(TAF_BETA_VERSION).ndds$(NDDS_MAJOR_VERSION).$(NDDS_MINOR_VERSION).$(NDDS_BETA_VERSION)
    
endif #NDDS_PubSub

#
# Search for CDDS_PubSub ? in ACE_SHLIBS (CoreDX)
#
ifneq (, $(findstring CDDS_PubSub, $(ACE_SHLIBS)))
  $(info TAF CDDS Connector detected)
  #Find the CDDS Version
  ifeq (cmd,$(findstring cmd,$(SHELL)))
    CDDS_MAJOR_VERSION := $(shell awk "/COREDX_DDS_VERSION_MAJOR/ { print $$3}" ${COREDX_TOP}/target/include/dds/coredx_version.h)
    CDDS_MINOR_VERSION := $(shell awk "/COREDX_DDS_VERSION_MINOR/ { print $$3}" ${COREDX_TOP}/target/include/dds/coredx_version.h)
    CDDS_BETA_VERSION := $(shell awk "/COREDX_DDS_VERSION_PATCH/ { print $$3}" ${COREDX_TOP}/target/include/dds/coredx_version.h)    
  else
    CDDS_MAJOR_VERSION := $(shell awk '/COREDX_DDS_VERSION_MAJOR/ { print $$3}' ${COREDX_TOP}/target/include/dds/coredx_version.h)
    CDDS_MINOR_VERSION := $(shell awk '/COREDX_DDS_VERSION_MINOR/ { print $$3}' ${COREDX_TOP}/target/include/dds/coredx_version.h)
    CDDS_BETA_VERSION := $(shell awk '/COREDX_DDS_VERSION_PATCH/ { print $$3}' ${COREDX_TOP}/target/include/dds/coredx_version.h)    
  endif
  
  #GNUACE_PROJECT_VERSION ?= $(TAF_MAJOR_VERSION).$(TAF_MINOR_VERSION).$(TAF_BETA_VERSION).cdds$(CDDS_MAJOR_VERSION).$(CDDS_MINOR_VERSION).$(CDDS_BETA_VERSION)
  
endif #CDDS_PubSub

#
# Search ODDS_PubSub ? in ACE_SHLIBS (OpenDDS) 
#
ifneq (, $(findstring ODDS_PubSub, $(ACE_SHLIBS)))
  $(info TAF ODDS Connector detected)
  #
  # This is a hack around OpenDDS. Its $(DDS_ROOT)/rules.dds.GNU incorrectly sets the 
  # SOVERSION instead of leaving it to MPC make framework.
  # It not only sets GNUACE_PROJECT_VERSION, but also hard codes SOVERSION and SONAME :(
  # So we are only going to set these early if OpenDDS is present and linked.
  #
  ifeq (cmd,$(findstring cmd,$(SHELL)))
    ODDS_MAJOR_VERSION := $(shell awk "/DDS_MAJOR_VERSION/ { print $$3}" ${DDS_ROOT}/dds/Version.h)
    ODDS_MINOR_VERSION := $(shell awk "/DDS_MINOR_VERSION/ { print $$3}" ${DDS_ROOT}/dds/Version.h)
    ODDS_BETA_VERSION := $(shell awk "/DDS_MICRO_VERSION/ { print $$3}" ${DDS_ROOT}/dds/Version.h)    
  else
    ODDS_MAJOR_VERSION := $(shell awk '/DDS_MAJOR_VERSION/ { print $$3}' ${DDS_ROOT}/dds/Version.h)
    ODDS_MINOR_VERSION := $(shell awk '/DDS_MINOR_VERSION/ { print $$3}' ${DDS_ROOT}/dds/Version.h)
    ODDS_BETA_VERSION := $(shell awk '/DDS_MICRO_VERSION/ { print $$3}' ${DDS_ROOT}/dds/Version.h)    
  endif
 
  #GNUACE_PROJECT_VERSION ?= $(TAF_MAJOR_VERSION).$(TAF_MINOR_VERSION).$(TAF_BETA_VERSION).odds$(ODDS_MAJOR_VERSION).$(ODDS_MINOR_VERSION).$(ODDS_BETA_VERSION)
  
endif #ODDS_PubSub

#
# Only TAF linkage, no DDS connector.
#
#ifneq (, $(findstring TAF, $(ACE_SHLIBS)))
#  GNUACE_PROJECT_VERSION ?= $(TAF_MAJOR_VERSION).$(TAF_MINOR_VERSION).$(TAF_BETA_VERSION)  
#endif


#
# Default to DAF Version 
#
GNUACE_PROJECT_VERSION ?= $(DAF_MAJOR_VERSION).$(DAF_MINOR_VERSION).$(DAF_BETA_VERSION)


# And we should honour the GNUACE_PROJECT_VERSION being set by MPC in the .mpc file. 
# ie work-around OpenDDS's shite.
# this is a specific search for the OpenDDS_Dcps library NOT the TAF connector.
# otherwise we let ACE/MPC framework deal with it.
ifneq (, $(findstring OpenDDS_Dcps, $(ACE_SHLIBS)))  
  ifeq ($(versioned_so),1) 
    ifeq ($(SOVERSION),)
        SOVERSION = .$(GNUACE_PROJECT_VERSION)
    endif # SOVERSION
    ifneq ($(SONAME),)
        SONAME = $(SHLIB).$(GNUACE_PROJECT_VERSION)
    endif # SONAME
  endif # versioned_so
endif

endif # rules_daf_gnu_included
